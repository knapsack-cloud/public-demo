{
  "id": "button",
  "title": "Button",
  "description": "Buttons are used to initialize an action. Button labels express what action will occur when the user interacts with it.",
  "demoSize": "s",
  "demoWidths": [
    {
      "width": 180
    }
  ],
  "templates": [
    {
      "id": "react",
      "title": "React",
      "path": "@knapsack-cloud/public-demo-react",
      "alias": "Button",
      "templateLanguageId": "react",
      "spec": {
        "props": {
          "type": "object",
          "$schema": "http://json-schema.org/draft-07/schema",
          "required": [],
          "properties": {
            "url": {
              "type": "string",
              "title": "URL",
              "description": "[URL]|[TITLE] — for example: http://google.com|Google"
            },
            "mode": {
              "enum": [
                "success",
                "info",
                "warning",
                "danger",
                "alert",
                "special"
              ],
              "type": "string",
              "title": "Button Mode"
            },
            "size": {
              "enum": ["small", "medium", "large"],
              "type": "string",
              "title": "Size"
            },
            "type": {
              "enum": ["solid", "outline"],
              "type": "string",
              "title": "Button Type",
              "default": "solid"
            }
          },
          "description": ""
        },
        "slots": {
          "children": {
            "title": "children",
            "isRequired": true
          }
        }
      },
      "demosById": {
        "main": {
          "id": "main",
          "data": {
            "props": {
              "url": "#url",
              "mode": "info",
              "size": "medium",
              "type": "solid"
            },
            "slots": {
              "children": ["Button"]
            }
          },
          "type": "data",
          "title": "Primary"
        },
        "2CXfLJgtaC": {
          "id": "2CXfLJgtaC",
          "data": {
            "props": {
              "url": "#url",
              "mode": "special",
              "size": "medium",
              "type": "outline"
            },
            "slots": {
              "children": ["Button"]
            }
          },
          "type": "data",
          "title": "Secondary"
        }
      },
      "demos": ["main", "2CXfLJgtaC"],
      "slices": []
    }
  ],
  "subPages": [
    {
      "title": "Usage",
      "id": "Overview",
      "slices": [
        {
          "id": "ks-content-block-YkyHkvdzp_",
          "data": {
            "md": [
              "# Overview\nButtons are clickable elements that are used to trigger actions. They communicate calls to action to the user and allow users to interact with pages in a variety of ways. Button labels express what action will occur when the user interacts with it.\n\n### When to use\nUse buttons to communicate actions users can take and to allow users to interact with the page. Each page should have one primary button, and any remaining calls to action should be represented as lower emphasis buttons.\n\n### When not to use\nDo not use buttons as navigational elements. Instead, use links when the desired action is to take the user to a new page."
            ],
            "columns": 1
          },
          "blockId": "markdown-slice"
        },
        {
          "id": "ks-content-block-1LTGO8xsrC",
          "data": {
            "md": [
              "## Button variants\nEach button variant has a particular function and its design signals that function to the user. It is therefore very important that the different variants are implemented consistently across products, so that they message the correct actions.\n\n### Mode\n* **Success**  - For the principal call to action on the page. Primary buttons should only appear once per screen (not including the application header, modal dialog, or side panel).\n* **Info**  - For secondary actions on each page. Secondary buttons can only be used in conjunction with a primary button. As part of a pair, the secondary button’s function is to perform the negative action of the set, such as “Cancel” or “Back”. Do not use a secondary button in isolation and do not use a secondary button for a positive action.\n* **Warning**  - For less prominent, and sometimes independent, actions. Tertiary buttons can be used in isolation or paired with a primary button when there are multiple calls to action. Tertiary buttons can also be used for sub-tasks on a page where a primary button for the main and final action is present.\n* **Danger**  - For actions that could have destructive effects on the user’s data (for example, delete or remove).\n* **Alert**  - For actions that could impact other settings indirectly.\n* **Special**  - For special or unique actions; often used in conjunction with a primary button.\n\n### Size\n* **Small**  - For use in small viewport experiences.\n* **Medium**  - For use in medium viewport experiences.\n* **Large**  - For use in large viewport experiences.\n\n### Type\n* **Solid**  - For use in combination with primary buttons, to present a prominently emphasized call to action.\n* **Outlined**  - For use in combination with secondary and tertiary actions, to present a de-emphasized user option."
            ],
            "columns": 1
          },
          "blockId": "markdown-slice"
        },
        {
          "id": "ks-content-block--plYGPDwcr",
          "data": {
            "size": "s",
            "demoId": "main",
            "patternId": "button",
            "templateId": "react",
            "variationId": "mode"
          },
          "blockId": "pattern-variations"
        },
        {
          "id": "ks-content-block-1VyLx4PL0Q",
          "data": {
            "size": "s",
            "demoId": "main",
            "patternId": "button",
            "templateId": "react",
            "variationId": "size"
          },
          "blockId": "pattern-variations"
        },
        {
          "id": "ks-content-block-XRlXkinFFT",
          "data": {
            "demoId": "main",
            "demoSize": "landscape",
            "patternId": "button",
            "templateId": "react",
            "hideControls": false,
            "playgroundUi": {
              "demoSize": "landscape",
              "showSchemaForm": false,
              "showCodeSnippet": true
            },
            "showSchemaForm": false,
            "showCodeSnippet": true
          },
          "blockId": "pattern-template-slice"
        },
        {
          "id": "ks-content-block-kCs__ou9y9",
          "data": {
            "size": "s",
            "demoId": "2CXfLJgtaC",
            "patternId": "button",
            "templateId": "react",
            "variationId": "type"
          },
          "blockId": "pattern-variations"
        },
        {
          "id": "ks-content-block-PgZf2sEi0K",
          "data": {
            "md": [
              "## Emphasis\nYou don’t necessarily need to use the buttons in the order that their labels imply. For example, you don’t always need to use the secondary button as the second button in your layout. The most important thing is to establish a visual hierarchy between the buttons in your UI. Keep these best practices in mind.\n\n#### A single, high-emphasis button\nAs a general rule, a layout should contain a single high-emphasis button that makes it clear that other buttons have less importance in the hierarchy. This high-emphasis button commands the most attention.\n\n#### Multiple button emphasis\nA high-emphasis button can be accompanied by medium- and low-emphasis buttons that perform less important actions. Keep in mind that you should only group together calls to action that have a relationship to one another.\n\nAlthough secondary buttons have less visual prominence because they are less saturated than their primary counterparts, they are still tonally heavy. If your layout requires multiple actions—as is the case with some toolbars, data lists and dashboards—low emphasis buttons (tertiary or ghost) may be a better choice."
            ],
            "columns": 1
          },
          "blockId": "markdown-slice"
        },
        {
          "id": "ks-content-block-ERHZS37CMD",
          "data": {
            "md": [
              "## Alignment\nAlignment refers to whether the buttons are aligned to the right or the left of a window, container, or layout. Buttons are unique, more so than any other component, in that their alignment depends on where they appear and whether or not they’re contained within another component.\n\nAs a general rule, on full-page designs, the primary button is on the left side of the page. When the browser window is large and the user is scrolling to read, it’s best to have the primary button where the user’s attention has been focused all along. Whereas in wizards, where a user is progressing through a series of steps or dialog windows, the primary action traditionally sits at the bottom right. Buttons within components such as notifications, search fields, and data tables are also right-aligned.\n\nIn some cases a button group—or even a single button in the case of a side panel or small tile—may span the entire width of a window or container. Typical nested button locations include:\n\n- Banner calls to action\n- Dialog windows\n- Wizards\n- Forms\n- Cards\n- Toolbars\n\n![](https://knapsack.imgix.net/site/demo-design-system/button_usage_10-jdafvzztue.png?w=800&auto=compress)"
            ],
            "columns": 1
          },
          "blockId": "markdown-slice"
        },
        {
          "id": "ks-content-block-CWcgPllcdw",
          "data": {
            "md": [
              "## Related\n- [Author pattern](https://app.knapsack.cloud/site/demo-design-system/latest/pattern/author)\n- [Card pattern](https://app.knapsack.cloud/site/demo-design-system/latest/pattern/card)\n\n\n## References\n* Mehmet Goktürk, [The Glossary of Human Computer Interaction, Chapter 37](https://www.interaction-design.org/literature/book/the-glossary-of-human-computer-interaction/fitts-s-law) (The Interaction Design Foundation)\n* Jakob Nielsen, [OK-Cancel or Cancel-OK? The Trouble With Button](https://www.nngroup.com/articles/ok-cancel-or-cancel-ok/)s (Nielsen Norman Group, 2008)\n* Artem Syzonenko [Buttons on the web: placement and order](https://uxdesign.cc/buttons-placement-and-order-bb1c4abadfcb) (UX Collective, 2019)\n\n\n## Feedback\nHelp us improve this component by providing feedback, asking questions, and leaving any other comments on [GitHub](https://github.com/knapsack-cloud/demo-design-system/).\n\n"
            ],
            "columns": 1
          },
          "blockId": "markdown-slice"
        }
      ]
    },
    {
      "title": "Accessibility",
      "id": "Accessibility",
      "slices": [
        {
          "id": "ks-content-block-nFepVH2iK2",
          "blockId": "markdown-slice",
          "data": {
            "md": "## How it works\nThe Button component is used to trigger an action or event, such as submitting a form, opening a modal, canceling an action, or performing an add or delete operation. Almost all interactions in the Carbon Design System are implemented using the native <code>button</code> element.\n\nBy default, interactive elements like <code>button</code> are included in the tab order of the document. When a button has focus, both the Space and Enter keys will activate the button. If the button is disabled, then the disabled attribute is provided.\n\nThe label for a button can be computed by the contents of the underlying <code>button</code>, or provided by the aria-label or aria-labelledby attributes. Additional information about the button may be supplied by the aria-describedby attribute."
          }
        },
        {
          "id": "ks-content-block-9SdC5V2SSU",
          "blockId": "markdown-slice",
          "data": {
            "md": "## Accessibility considerations\nThis component has been validated to meet the [WCAG 2.1 AA](https://www.w3.org/TR/WCAG21/) and [Section 508](http://www.section508.gov/) accessibility guidelines, however changes made by the content owner can affect accessibility compliance. Be sure to review and follow the guidance in this section when updating or adding new content to this component.\n\n1. The button can be activated using both the Space or Enter key.\n2. The button should have text or label that accurately describes the action of the button.\n3. If a description of the button’s function is present, the button element should have an <code>aria-describedby</code> set to the ID of the element containing the description.\n4. After the button is activated ensure the focus is set correctly based on the type of action the button performs. See [W3C WAI-ARIA Authoring Practices Button Design Pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#button) for a list of examples."
          }
        },
        {
          "id": "ks-content-block-KILApugMxg",
          "blockId": "markdown-slice",
          "data": {
            "md": "## Resources\n* [W3C WAI-ARIA Authoring Practices Button Design Pattern](https://www.w3.org/TR/wai-aria-practices-1.1/#button) covers the usage of ARIA names, state and roles, as well as the expected keyboard interactions.\n* Best In Class Example: [IBM Accessibility Requirements](https://www.ibm.com/able/requirements/requirements/)"
          }
        }
      ]
    },
    {
      "title": "Figma",
      "id": "Figma",
      "slices": [
        {
          "id": "ks-content-block-5IKy6auf0k",
          "blockId": "figma-slice",
          "data": {
            "clickToInteract": false,
            "height": "800",
            "url": "https://www.figma.com/file/uXroEUE22VtrT6CiF3zQqS/tailwind-ui-figma-kit-2021-03-26?node-id=752%3A32"
          }
        },
        {
          "id": "ks-content-block-_quWnLXCar",
          "blockId": "figma-slice",
          "data": {
            "url": "https://www.figma.com/file/uXroEUE22VtrT6CiF3zQqS/tailwind-ui-figma-kit-2021-03-26?node-id=172%3A4447",
            "height": "480",
            "clickToInteract": false
          }
        }
      ]
    },
    {
      "title": "Legacy Storybook",
      "id": "Legacy",
      "slices": [
        {
          "id": "ks-content-block-4gpsIFEONx",
          "blockId": "markdown-slice",
          "data": {
            "md": [
              "## NOTE\nBelow is an embed of the most recent Storybook story for our button components. **We have stopped updating Storybook as of June 2021.** \n\nFor up to date pattern examples, please reference the coresponding code tabs, above."
            ],
            "columns": 1
          }
        },
        {
          "id": "ks-content-block-0tYaqASlzs",
          "blockId": "generic-iframe",
          "data": {
            "clickToInteract": false,
            "height": "1600",
            "url": "https://knapsack-storybook.netlify.app/iframe.html?id=example-button--button-stories&viewMode=docs"
          }
        }
      ]
    }
  ],
  "tabs": [
    {
      "type": "subPage",
      "id": "Overview"
    },
    {
      "type": "subPage",
      "id": "Accessibility"
    },
    {
      "type": "subPage",
      "id": "Figma"
    },
    {
      "type": "template",
      "id": "react"
    },
    {
      "type": "subPage",
      "id": "Legacy"
    }
  ],
  "statuses": {
    "design": "ready",
    "react": "ready",
    "twig": "ready",
    "handlebars": "ready"
  }
}
